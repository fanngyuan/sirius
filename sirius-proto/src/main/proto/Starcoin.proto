syntax = "proto2";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

package org.starcoin.proto;

message ProtoMsgPing {
    required uint64 nonce = 1;
}

message ProtoMsgPong {
    required uint64 nonce = 1; //newNonce from MsgPing
}

//just for test
message TestData{
    required bool booleanValue = 1;
    required uint32 intValue = 2;
    required bytes stringValue = 3;
    required bytes bytesValue = 4;
}

message SuccResponse {
    required bool succ = 1;
}

message DepositRequest {
    required bytes address = 1;
    required uint64 amount = 2;
}

message ProtoOffchainTransaction {
    required uint32 eon = 1;
    required bytes from = 2;
    required bytes to = 3;
    required uint64 amount = 4;
    required uint64 timestamp = 5;
    optional bytes sign = 6;
}

message ProtoAccountInfo {
    required bytes address = 1;
    required uint64 allotment = 2;
    optional ProtoUpdate update = 3;
}

message ProtoNodeInfo {
    required bytes left = 1;
    required uint64 offset = 2;
    required bytes right = 3;
}

message ProtoAugmentedMerkleTreeNode {
    required uint64 offset = 1;
    optional ProtoNodeInfo node = 2;
    optional ProtoAccountInfo account = 3;
    required uint64 allotment = 4;
}

message InitiateWithdrawalRequest {
    required bytes address = 1;
    required ProtoAugmentedMerklePath path = 2;
    required uint64 amount = 3;
}

enum ProtoWithdrawalStatusType {
    WITHDRAWAL_STATUS_INIT = 0;
    WITHDRAWAL_STATUS_CANCEL = 1;
    WITHDRAWAL_STATUS_PASSED = 2;
    WITHDRAWAL_STATUS_CONFIRMED = 3;
    WITHDRAWAL_STATUS_CLIENT_CONFIRMED = 4;
}

message ProtoWithdrawalStatus {
    required ProtoWithdrawalStatusType type = 1;
    required InitiateWithdrawalRequest withdrawal = 2;
}

enum ProtoMerklePathDirection {
    DIRECTION_UNKNOWN = 0;
    DIRECTION_LEFT = 1;
    DIRECTION_RIGTH = 2;
}

message ProtoAugmentedMerklePathNode {
    required ProtoAugmentedMerkleTreeNode node = 1;
    required ProtoMerklePathDirection direction = 2;
}

message ProtoAugmentedMerklePath {
    required uint32 eon = 1;
    repeated ProtoAugmentedMerklePathNode nodes = 2;
}

//Update
message ProtoUpdate {
    optional bytes root = 1;
    required uint64 sendAmount = 2;
    required uint64 receiveAmount = 3;
    required uint64 version = 4;
    optional bytes sign = 5;
    optional bytes hubSign = 6;
    required uint32 eon = 7;
}

message ProtoParticipant {
    required bytes publicKey = 1;
}

message ProtoParticipantGang {
    required ProtoParticipant participant = 1;
    required bytes privateKey = 2;
}

message CancelWithdrawalRequest {
    required ProtoParticipant participant = 1;
    required ProtoUpdate update = 2;
    required ProtoAugmentedMerklePath path = 3;
}

message ProtoBalanceUpdateChallenge {
    required ProtoBalanceUpdateProof proof = 1;
    required bytes publicKey = 2;
}

message ProtoBalanceUpdateProof {
    required ProtoAugmentedMerklePath path = 1;
    required ProtoUpdate update = 2;
}

message CloseBalanceUpdateChallengeRequest {
    required ProtoBalanceUpdateProof proof = 1;
}

message RegisterParticipantRequest {
    required ProtoParticipant participant = 1;
    required ProtoUpdate update = 2;
}

message QueryHubCommitRequest {
    required uint32 eon = 1;
}

message ProtoHubRoot {
    required ProtoAugmentedMerkleTreeNode root = 1;
    required uint32 eon = 2;
}

message CreateHubRequest {
    //hub address
    required bytes address = 1;
    required bytes publicKey = 2;
}

message ProtoHubInfo {
    required bool ready = 1;
    required uint32 eon = 2;
    required ProtoAugmentedMerkleTreeNode root = 3;
    required bytes publicKey = 4;
    required uint32 blocksPerEon = 5;
}

message ProtoBlockInfo {
    required uint32 height = 1;
    repeated ProtoChainTransaction transactions = 2;
}

message ProtoReceipt {
    required bool success = 1;
    optional string error = 2;
    optional bytes data = 3;
}

message ProtoChainTransaction {
    required bytes from = 1;
    required bytes to = 2;
    required uint64 amount = 3;
    required uint64 timestamp = 4;
    optional string action = 5;
    optional bytes arguments = 6;
    optional ProtoReceipt receipt = 7;
    optional bytes publicKey = 8;
    optional bytes sign = 9;
}

message ProtoBlockListRequest {
    required bytes from = 1;
    required bytes to = 2;
}

message ProtoMerkleTreeNode {
    required bytes hash = 1;
    required google.protobuf.Any data = 2;
}

message ProtoMerklePathNode {
    required ProtoMerkleTreeNode node = 1;
    required ProtoMerklePathDirection direction = 2;
}

message ProtoMerklePath {
    repeated ProtoMerklePathNode nodes = 1;
}

message OpenTransferDeliveryChallengeRequest {
    required ProtoUpdate update = 1;
    required ProtoOffchainTransaction transaction = 2;
    required ProtoMerklePath path = 3;
}

message CloseTransferDeliveryChallengeRequest {
    required ProtoAugmentedMerklePath balancePath = 1;
    required ProtoUpdate update = 2;
    required ProtoMerklePath transPath = 3;
    required bytes toUserPublicKey = 4;
}

message RecoverFundsRequest {
    required ProtoAugmentedMerklePath path = 1;
    required bytes address = 2;
}

message GetBlocksResponse {
    repeated ProtoBlockInfo blocks = 1;
}

message GetBlockResponse {
    required ProtoBlockInfo block = 1;
}

enum Order {
    ASC = 0;
    DESC = 1;
}

message GetBlocksRequest {
    required uint32 height = 1;
    required uint32 count = 2;
    required Order order = 3;
}

message SyncTransactionsRequest {
    required uint32 height = 1;
    required bytes addr = 2;
}

message SyncTransactionsResponse {
    required uint32 height = 1;
    repeated ProtoChainTransaction transactions = 2;
}

message QueryBalanceUpdateChallengesRequest {
    required bytes addr = 1;
}

message QueryBalanceUpdateChallengesResponse {
    repeated BalanceUpdateChallengeStatus challenges = 1;
}

enum ChallengeStatus {
    OPEN = 0;
    CLOSE = 1;
}

message BalanceUpdateChallengeStatus {
    required ProtoBalanceUpdateChallenge challenge = 1;
    required ChallengeStatus status = 2;
}

message ProtoHubAccount {
    required bytes address = 1;
    required ProtoUpdate update = 2;
    required uint64 allotment = 3;
    required uint64 deposit = 4;
    required uint64 withdraw = 5;
    repeated ProtoOffchainTransaction transactions = 6;
    required bytes publicKey = 7;
}

message ChainBalanceResponse {
    required uint64 amount = 1;
}

message GetBlockRequest {
    required uint32 height = 1;
}

message QueryWithdrawalStatusRequest {
    required uint32 eon = 1;
    required bytes addr = 2;
}

message ProtoIOU {
    required ProtoOffchainTransaction transaction = 1;
    required ProtoUpdate update = 2;
}

enum ProtoHubEventType {
    HUB_EVENT_NEW_HUB_ROOT = 0;
    HUB_EVENT_NEW_DEPOSIT = 1;
    HUB_EVENT_WITHDRAWAL = 2;
    HUB_EVENT_NEW_TX = 3;
    HUB_EVENT_NEW_UPDATE = 4;
}

message ProtoHubEvent {
    required ProtoHubEventType type = 1;
    required bytes address = 2;
    required google.protobuf.Any payload = 3;
}

message BlockAddressAndEon {
    required bytes address = 1;
    required int32 eon = 2;
}

enum ProtoHubMaliciousFlag {
    PROTO_STEAL_DEPOSIT = 0;
    PROTO_STEAL_WITHDRAWAL = 1;
    PROTO_STEAL_TRANSACTION = 2;
    PROTO_STEAL_TRANSACTION_IOU = 3;
}

message ProtoHubMaliciousFlags {
    repeated ProtoHubMaliciousFlag flags = 1;
}

message ProtoBlockAddress {
    required bytes address = 1;
}

message QueryCurrentTransferDeliveryChallengesRequest {
    required ProtoBlockAddress addr = 1;
}

message QueryCurrentTransferDeliveryChallengesResponse {
    repeated ProtoTransferDeliveryChallenge challenges = 1;
}

message ProtoTransferDeliveryChallenge {
    required ProtoUpdate update = 1;
    required ProtoOffchainTransaction transaction = 2;
    required ProtoMerklePath path = 3;
    required ChallengeStatus status = 4;
}

service HubService {
    rpc registerParticipant (RegisterParticipantRequest) returns (ProtoUpdate);
    rpc sendNewTransfer (ProtoIOU) returns (SuccResponse);
    rpc queryNewTransfer (ProtoBlockAddress) returns (ProtoOffchainTransaction);
    rpc receiveNewTransfer (ProtoIOU) returns (SuccResponse);
    rpc querySignedUpdate (ProtoBlockAddress) returns (ProtoUpdate);
    rpc querySignedUpdateWithEon (BlockAddressAndEon) returns (ProtoUpdate);
    rpc getProof (ProtoBlockAddress) returns (ProtoAugmentedMerklePath);
    rpc getProofWithEon (BlockAddressAndEon) returns (ProtoAugmentedMerklePath);
    rpc getHubInfo (google.protobuf.Empty) returns (ProtoHubInfo);
    rpc watch (ProtoBlockAddress) returns (stream ProtoHubEvent);
    rpc watchHubRoot (google.protobuf.Empty) returns (stream ProtoHubRoot);
    rpc getHubAccount (ProtoBlockAddress) returns (ProtoHubAccount);
    //just for mock test.
    rpc deposit (DepositRequest) returns (SuccResponse);
    //return flags merge result.
    rpc setMaliciousFlags (ProtoHubMaliciousFlags) returns (ProtoHubMaliciousFlags);
    rpc getMaliciousFlags (google.protobuf.Empty) returns (ProtoHubMaliciousFlags);
    //return previous Flags
    rpc resetMaliciousFlags (google.protobuf.Empty) returns (ProtoHubMaliciousFlags);
}
